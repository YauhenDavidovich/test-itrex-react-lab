{"version":3,"sources":["dll/getTableData.ts","bll/table-reducer.ts","components/Controls/TablePagination.tsx","components/Table/Table.tsx","components/Controls/Search.tsx","components/Controls/Filter.tsx","components/Profile/Profile.tsx","components/MainPage/MainPage.tsx","utils/Sort.ts","App.tsx","reportWebVitals.ts","bll/store.ts","index.tsx"],"names":["a","fetch","response","json","responseJson","console","error","getTableData","initialState","fetchTableDataTC","dispatch","then","res","type","profiles","TablePagination","props","numPages","Math","ceil","pages","pageLimit","goToPrevPage","currentPage","setPage","goToNextPage","onClick","blocks","i","push","getPaginationNumbers","map","pageNum","Table","useState","page","style","display","flexDirection","justifyContent","width","header","offset","slice","getPaginatedProfiles","row","renderRow","length","Search","className","placeholder","onChange","e","setSearchTerm","target","value","Filter","val","handleFilterChange","Profile","firstName","lastName","description","adress","streetAddress","city","state","zip","MainPage","uid","useUID","useDispatch","useSelector","searchTerm","currentProfile","setCurrenProfile","filter","sortConfig","setSortConfig","items","useMemo","sortableItems","key","sort","b","direction","requestSort","useSortableData","filteredProfilesBySearch","searched","item","toLowerCase","includes","filteredProfilesByState","filtered","handlerShowProfile","useCallback","useEffect","headerOptions","id","name","getClassNamesForHeaders","undefined","alignItems","height","maxWidth","margin","field","generateRow","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","action","rows","store","createStore","applyMiddleware","thunkMiddleware","window","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.17ee6454.chunk.js","sourcesContent":["export interface TableDataType {\r\n    id:          number;\r\n    firstName:   string;\r\n    lastName:    string;\r\n    email:       string;\r\n    phone:       string;\r\n    adress:      Adress;\r\n    description: string;\r\n}\r\n\r\nexport interface Adress {\r\n    streetAddress: string;\r\n    city:          string;\r\n    state:         string;\r\n    zip:           string;\r\n}\r\n\r\nasync function getTableData<TableDataType>() {\r\n    try {\r\n        let response = await fetch('https://itrex-react-lab-files.s3.eu-central-1.amazonaws.com/react-test-api.json');\r\n        let responseJson = await response.json();\r\n        console.error(responseJson);\r\n\r\n        return responseJson;\r\n    } catch (error) {\r\n        console.error(error);\r\n    }\r\n}\r\n\r\n\r\nexport default getTableData\r\n","import { Dispatch } from 'redux'\r\nimport getTableData, {TableDataType} from \"../dll/getTableData\";\r\n\r\nconst initialState: Array<TableDataType> = []\r\n\r\nexport const profilesReducer = (state: Array<TableDataType> = initialState, action: ActionsType): Array<TableDataType> =>  {\r\n    switch (action.type) {\r\n        case 'SET-TABLE':\r\n            return action.profiles.map(rows => ({...rows}))\r\n        default:\r\n            return state\r\n\r\n    }\r\n\r\n}\r\n\r\nexport const setTableDataAC = (profiles: Array<TableDataType>) => ({type: 'SET-TABLE', profiles} as const)\r\n\r\n// thunks\r\nexport const fetchTableDataTC = () => {\r\n\r\n    return (dispatch: ThunkDispatch) => {\r\n        getTableData()\r\n            .then((res) => {\r\n                dispatch(setTableDataAC(res))\r\n            })\r\n    }\r\n}\r\n\r\n// types\r\nexport type SetTableDataActionType = ReturnType<typeof setTableDataAC>;\r\ntype ActionsType = SetTableDataActionType\r\n\r\ntype ThunkDispatch = Dispatch<ActionsType>\r\n","import React, { Fragment } from 'react';\r\n\r\ntype TablePaginationPropsType = {\r\n    currentPage: number,\r\n    pages: number,\r\n    setPage: (number: number) => void\r\n    pageLimit: number,\r\n}\r\n\r\nconst TablePagination = ( props:TablePaginationPropsType ) => {\r\n    const numPages = Math.ceil(props.pages / props.pageLimit);\r\n\r\n    const getPaginationNumbers = () => {\r\n        const blocks = [];\r\n        for (let i = 0; i < numPages; i++) {\r\n            blocks.push(i);\r\n        }\r\n        return blocks;\r\n    };\r\n\r\n    const renderPageBlocks = () => {\r\n        const getPageNumbers = getPaginationNumbers();\r\n        return getPageNumbers.map(pageNum =>\r\n            <a\r\n                key={pageNum}\r\n                onClick={() => props.setPage(pageNum)}\r\n            >\r\n                {pageNum}\r\n            </a>\r\n        );\r\n    };\r\n\r\n    const goToPrevPage = () => {\r\n        if (props.currentPage > 0) {\r\n            props.setPage(props.currentPage - 1);\r\n        }\r\n    };\r\n\r\n    const goToNextPage = () => {\r\n        if (props.currentPage < numPages - 1) {\r\n            props.setPage(props.currentPage + 1);\r\n        }\r\n    };\r\n\r\n    const renderPrevPageBlocks = () => {\r\n        return (\r\n            <Fragment>\r\n                <a key=\"first-page\"  onClick={() => props.setPage(0)}>&#171;</a>\r\n                <a key=\"prev-page\" onClick={goToPrevPage}>&#8592;</a>\r\n            </Fragment>\r\n        )\r\n    };\r\n\r\n    const renderNextPageBlocks = () => {\r\n        return (\r\n            <Fragment>\r\n                <a key=\"next-page\" onClick={goToNextPage}>&rarr;</a>\r\n                <a key=\"last-page\" onClick={() => props.setPage(numPages - 1)}>&raquo;</a>\r\n            </Fragment>\r\n        )\r\n    };\r\n\r\n    return (\r\n        <div >\r\n            {renderPrevPageBlocks()}\r\n            {renderPageBlocks()}\r\n            {renderNextPageBlocks()}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TablePagination;\r\n","import React, {useMemo, useState} from 'react';\r\nimport {TableDataType} from \"../../dll/getTableData\";\r\nimport TablePagination from \"../Controls/TablePagination\";\r\n\r\ntype PropsType = {\r\n    profiles: Array<TableDataType>\r\n    renderRow: (row: TableDataType) => void\r\n    pageLimit: number\r\n    header: any\r\n}\r\n\r\n\r\nexport const Table = (props: PropsType) => {\r\n    const [page, setPage] = useState(0);\r\n    const getPaginatedProfiles = (profiles: Array<TableDataType>) => {\r\n        const offset = page * props.pageLimit;\r\n        return profiles.slice(offset, offset + props.pageLimit);\r\n    }\r\n    const renderRowData = () => {\r\n        return getPaginatedProfiles(props.profiles);\r\n    }\r\n\r\n    return (\r\n        <div style={{\r\n            display: 'flex',\r\n            flexDirection: 'column',\r\n            justifyContent: 'space-between',\r\n            width: '100%'\r\n        }}>\r\n            <table>\r\n                {props.header}\r\n                {renderRowData().map(row => props.renderRow(row))}\r\n            </table>\r\n            <TablePagination\r\n                pageLimit={props.pageLimit}\r\n                pages={props.profiles.length}\r\n                currentPage={page}\r\n                setPage={setPage}\r\n            />\r\n        </div>\r\n\r\n)\r\n}\r\n\r\nexport default Table;\r\n","import React from \"react\";\r\n\r\ntype SearchPropsType = {\r\n    setSearchTerm: (e: string) => void\r\n}\r\n\r\n\r\nconst Search = (props:SearchPropsType) => {\r\n    return (\r\n        <div className=\"search\">\r\n            <input placeholder=\"Search by name\" type=\"text\" onChange={(e) => props.setSearchTerm(e.target.value)}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Search;\r\n","import React from \"react\";\r\n\r\ntype FilterPropsType = {\r\n    handleFilterChange:  (selVal: string) => void\r\n}\r\n\r\n\r\nconst Filter = (props: FilterPropsType) => {\r\n    return (\r\n        <div className=\"filter\">\r\n            Filter by state:\r\n            <select onChange={(val) => props.handleFilterChange(val.target.value)}>\r\n                <option value=\"\">none</option>\r\n                <option value=\"AK\">AK</option>\r\n                <option value=\"AL\">AL</option>\r\n                <option value=\"AR\">AR</option>\r\n                <option value=\"AZ\">AZ</option>\r\n                <option value=\"CA\">CA</option>\r\n                <option value=\"CO\">CO</option>\r\n                <option value=\"CT\">CT</option>\r\n                <option value=\"DE\">DE</option>\r\n                <option value=\"FL\">FL</option>\r\n                <option value=\"GA\">GA</option>\r\n                <option value=\"HI\">HI</option>\r\n                <option value=\"IA\">IA</option>\r\n                <option value=\"ID\">ID</option>\r\n                <option value=\"IL\">IL</option>\r\n                <option value=\"IN\">IN</option>\r\n                <option value=\"KS\">KS</option>\r\n                <option value=\"KY\">KY</option>\r\n                <option value=\"LA\">LA</option>\r\n                <option value=\"MA\">MA</option>\r\n                <option value=\"MD\">MD</option>\r\n                <option value=\"ME\">ME</option>\r\n                <option value=\"MI\">MI</option>\r\n                <option value=\"MN\">MN</option>\r\n                <option value=\"MO\">MO</option>\r\n                <option value=\"MS\">MS</option>\r\n                <option value=\"MT\">MT</option>\r\n                <option value=\"NC\">NC</option>\r\n                <option value=\"ND\">ND</option>\r\n                <option value=\"NE\">NE</option>\r\n                <option value=\"NH\">NH</option>\r\n                <option value=\"NJ\">NJ</option>\r\n                <option value=\"NM\">NM</option>\r\n                <option value=\"NV\">NV</option>\r\n                <option value=\"NY\">NY</option>\r\n                <option value=\"OH\">OH</option>\r\n                <option value=\"OK\">OK</option>\r\n                <option value=\"OR\">OR</option>\r\n                <option value=\"PA\">PA</option>\r\n                <option value=\"RI\">RI</option>\r\n                <option value=\"SC\">SC</option>\r\n                <option value=\"SD\">SD</option>\r\n                <option value=\"TN\">TN</option>\r\n                <option value=\"TX\">TX</option>\r\n                <option value=\"UT\">UT</option>\r\n                <option value=\"VA\">VA</option>\r\n                <option value=\"VT\">VT</option>\r\n                <option value=\"WA\">WA</option>\r\n                <option value=\"WI\">WI</option>\r\n                <option value=\"WV\">WV</option>\r\n                <option value=\"WY\">WY</option>\r\n            </select>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Filter;\r\n","import React from \"react\";\r\nimport {TableDataType} from \"../../dll/getTableData\";\r\n\r\ntype ProfilePropsType = {\r\n    row?: TableDataType\r\n}\r\n\r\nconst Profile = (props: ProfilePropsType) => {\r\n\r\n    if(props.row) {\r\n        return (\r\n            <div className=\"Profile\">\r\n                <h3>Profile info:</h3>\r\n                <div>Selected profile: {props.row.firstName} {props.row.lastName}</div>\r\n                <div>Description: {props.row.description}</div>\r\n                <div>Adress: {props.row.adress.streetAddress}</div>\r\n                <div>City: {props.row.adress.city}</div>\r\n                <div>State: {props.row.adress.state}</div>\r\n                <div>Index: {props.row.adress.zip}</div>\r\n\r\n            </div>\r\n        );\r\n    }\r\n    else return <></>\r\n\r\n\r\n}\r\n\r\nexport default Profile;\r\n","import {TableDataType} from \"../../dll/getTableData\";\r\nimport Table from \"../Table/Table\";\r\nimport {useCallback, useEffect, useMemo, useState} from \"react\";\r\nimport Search from \"../Controls/Search\";\r\nimport Filter from \"../Controls/Filter\";\r\nimport {useUID} from \"react-uid\";\r\nimport {fetchTableDataTC} from \"../../bll/table-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../bll/store\";\r\nimport Profile from \"../Profile/Profile\";\r\nimport {TestType, useSortableData} from \"../../utils/Sort\";\r\n\r\nconst MainPage = () => {\r\n    const uid = useUID();\r\n    const dispatch = useDispatch();\r\n    const profiles = useSelector<AppRootStateType, Array<TableDataType>>(state => state.profiles)\r\n    const [searchTerm, setSearchTerm] = useState(\"\")\r\n    const [currentProfile, setCurrenProfile] = useState<TableDataType>()\r\n    const [filter, handleFilterChange] = useState(\"\")\r\n\r\n    const {items, requestSort, sortConfig} = useSortableData(profiles);\r\n\r\n    let filteredProfilesBySearch = useMemo(() => {\r\n        let searched: Array<TableDataType> = [...items]\r\n        searched = searchTerm ? searched.filter(item => item.firstName.toLowerCase().includes(searchTerm.toLowerCase())) : searched\r\n        return searched\r\n    }, [items, searchTerm, handleFilterChange])\r\n\r\n    let filteredProfilesByState = useMemo(() => {\r\n        let filtered: Array<TableDataType> = [...filteredProfilesBySearch]\r\n        filtered = filter.length > 0 ? filtered.filter(item => item.adress.state.includes(filter)) : filtered\r\n        return filtered\r\n    }, [filteredProfilesBySearch, filter, handleFilterChange])\r\n\r\n    const handlerShowProfile = useCallback((row: TableDataType) => {\r\n        setCurrenProfile(row);\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        dispatch(fetchTableDataTC());\r\n    }, [])\r\n\r\n    const headerOptions : Array<{id:TestType, name: string}> = [\r\n        {\r\n            id: \"id\",\r\n            name: \"id\"\r\n        },\r\n        {\r\n            id: \"firstName\",\r\n            name: \"First Name\"\r\n        },\r\n        {\r\n            id: \"lastName\",\r\n            name: \"Last Name\"\r\n        },\r\n        {\r\n            id: \"email\",\r\n            name: \"Email\"\r\n        },\r\n        {\r\n            id: \"adress\",\r\n            name: \"State\"\r\n        }];\r\n\r\n    const generateRow = (row: any) => {\r\n        return (\r\n            <tbody>\r\n            <tr key={uid}>\r\n                {headerOptions.map(\r\n                    field => (\r\n                        <td onClick={() => handlerShowProfile(row)}>\r\n                            {field.id === 'adress' ? row.adress.state : row[field.id]}\r\n                        </td>\r\n                    ))}\r\n            </tr>\r\n            </tbody>\r\n\r\n        )\r\n    };\r\n\r\n    const getClassNamesForHeaders = (name: string) => {\r\n        if (!sortConfig) {\r\n            return;\r\n        }\r\n        // @ts-ignore\r\n        return sortConfig.key === name ? sortConfig.direction : undefined;\r\n    };\r\n\r\n    const header = (\r\n        <thead>\r\n        <tr>\r\n            {headerOptions.map(header => (\r\n                <th>\r\n                    {header.name}\r\n                    <button type=\"button\" onClick={() => requestSort(\r\n                        header.id\r\n                    )}\r\n                            className={getClassNamesForHeaders(header.id)}\r\n                    />\r\n\r\n                </th>\r\n            ))}\r\n        </tr>\r\n\r\n        </thead>\r\n    );\r\n\r\n    return (\r\n        <div style={{\r\n            display: 'flex',\r\n            flexDirection: 'column',\r\n            justifyContent: 'center',\r\n            alignItems: 'center',\r\n            height: '100vh',\r\n            maxWidth: '1024px',\r\n            width: '100%',\r\n            margin: '0 auto',\r\n        }}>\r\n            <div style={{\r\n                display: 'flex',\r\n                flexDirection: 'row',\r\n                justifyContent: 'space-between',\r\n                width: '100%'\r\n            }}>\r\n                <Filter handleFilterChange={handleFilterChange}/>\r\n                <Search setSearchTerm={setSearchTerm}/>\r\n            </div>\r\n            <div style={{\r\n                display: 'flex',\r\n                flexDirection: 'row',\r\n                justifyContent: 'space-between',\r\n                width: '100%'\r\n            }}>\r\n                <Table\r\n                    renderRow={row => generateRow(row)}\r\n                    profiles={filteredProfilesByState}\r\n                    pageLimit={20}\r\n                    header={header}\r\n                />\r\n                <Profile row={currentProfile}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MainPage;\r\n","import {useMemo, useState} from \"react\";\r\nimport {TableDataType} from \"../dll/getTableData\";\r\n\r\nexport  type TestType = \"id\"|\"firstName\"|\"lastName\"|\"email\"|\"phone\"|\"adress\"|\"description\"\r\n\r\n\r\nexport const useSortableData = (profiles: Array<TableDataType>) => {\r\n\r\n\r\n    const [sortConfig, setSortConfig] = useState<{key: TestType,direction: string } | null>(null);\r\n\r\n    const sortedItems = useMemo(() => {\r\n        let sortableItems = [...profiles];\r\n        if (sortConfig !== null) {\r\n            debugger\r\n            if (sortConfig.key === 'adress'){\r\n                sortableItems.sort((a, b) => {\r\n                    if (a.adress.state < b.adress.state) {\r\n                        return sortConfig.direction === 'ascending' ? -1 : 1;\r\n                    }\r\n                    if (a.adress.state > b.adress.state) {\r\n                        return sortConfig.direction === 'ascending' ? 1 : -1;\r\n                    }\r\n                    return 0;\r\n                });\r\n\r\n            }\r\n            sortableItems.sort((a, b) => {\r\n                if (a[sortConfig.key] < b[sortConfig.key]) {\r\n                    return sortConfig.direction === 'ascending' ? -1 : 1;\r\n                }\r\n                if (a[sortConfig.key] > b[sortConfig.key]) {\r\n                    return sortConfig.direction === 'ascending' ? 1 : -1;\r\n                }\r\n                return 0;\r\n            });\r\n        }\r\n        return sortableItems;\r\n    }, [profiles, sortConfig]);\r\n\r\n    const requestSort = (key:TestType) => {\r\n        let direction = 'ascending';\r\n        if (\r\n            sortConfig && sortConfig.key === key && sortConfig.direction === 'ascending'\r\n        ) {\r\n            direction = 'descending';\r\n        }\r\n        setSortConfig({ key, direction });\r\n    };\r\n\r\n    return { items: sortedItems, requestSort, sortConfig };\r\n};\r\n","import React, {useEffect} from 'react';\nimport './App.css';\nimport {useDispatch} from \"react-redux\";\nimport {fetchTableDataTC} from \"./bll/table-reducer\";\nimport MainPage from \"./components/MainPage/MainPage\";\n\nconst App = () => {\n    const dispatch = useDispatch();\n    useEffect(() => {\n        dispatch(fetchTableDataTC());\n    }, [dispatch])\n\n\n  return (\n    <div className=\"App\">\n      <MainPage/>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {applyMiddleware, combineReducers, createStore} from 'redux'\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport {profilesReducer} from \"./table-reducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n    profiles: profilesReducer\r\n})\r\n// непосредственно создаём store\r\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from \"react-redux\";\nimport {store} from \"./bll/store\";\n\nReactDOM.render(\n  <React.StrictMode>\n      <Provider store={store}>\n    <App />\n          </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}